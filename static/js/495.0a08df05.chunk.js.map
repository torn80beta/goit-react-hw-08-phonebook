{"version":3,"file":"static/js/495.0a08df05.chunk.js","mappings":"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","sources":["components/Title/Title.styled.jsx","components/Title/Title.jsx","components/AddContactForm/AddContactForm.styled.jsx","redux/contacts/selectors.js","components/AddContactForm/AddContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledTitleH2 = styled.h2`\n  margin-left: 30px;\n  margin-bottom: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledTitleH2 } from './Title.styled';\n\nexport const Title = ({ title }) => {\n  return <StyledTitleH2>{title}</StyledTitleH2>;\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const StyledLabel = styled.label`\n  position: relative;\n  display: block;\n  margin-left: 30px;\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n  margin: 10px 0px 40px;\n  padding: 3px 10px;\n  width: 250px;\n  height: 20px;\n  border: none;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n  border-radius: 5px;\n\n  &:focus {\n    outline: 1px solid greenyellow;\n  }\n`;\n\nexport const StyledErrorText = styled.p`\n  position: absolute;\n  top: 65px;\n  font-size: 16px;\n  color: red;\n`;\n\nexport const StyledButton = styled.button`\n  display: block;\n  margin: 0 30px 40px;\n  background-color: white;\n  border: 0px solid gray;\n  border-radius: 5px;\n  padding: 5px 15px;\n  height: 25px;\n  cursor: pointer;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n\n  &:hover {\n    background-color: azure;\n  }\n\n  &:active {\n    background-color: rgb(207, 248, 197);\n  }\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport {\n  StyledInput,\n  StyledErrorText,\n  StyledButton,\n  StyledLabel,\n} from './AddContactForm.styled';\nimport * as yup from 'yup';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required('Name is a required field.')\n    .min(2, 'Name must be at least 13 characters.')\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message: 'Name must match the following: \"a-z, A-Z, а-я, А-Я\".',\n      excludeEmptyString: false,\n    }),\n  number: yup\n    .string()\n    .required('Number is a required field.')\n    .min(13, 'Number must be at least 13 characters.')\n    .max(13, 'Number must be at most 13 characters.')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Number must contain only numbers from \"0\" to \"9\" and \"+\" or \"-\" symbols.',\n        excludeEmptyString: false,\n      }\n    ),\n});\n\nconst ErrorForm = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <StyledErrorText>{message}</StyledErrorText>}\n    />\n  );\n};\n\nconst AddContactForm = ({ addContact }) => {\n  const handleNameSubmit = (values, { resetForm }) => {\n    // console.log(values);\n    addContact(values);\n    resetForm();\n  };\n\n  const isFetching = useSelector(getIsLoading);\n\n  handleNameSubmit.propTypes = {\n    values: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n    resetForm: PropTypes.func.isRequired,\n  };\n\n  return (\n    // console.log(isFetching),\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleNameSubmit}\n    >\n      <Form>\n        <StyledLabel htmlFor=\"name\">\n          Name:\n          <StyledInput\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorForm name=\"name\" />\n        </StyledLabel>\n\n        <StyledLabel htmlFor=\"number\">\n          Number:\n          <StyledInput\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorForm name=\"number\" />\n        </StyledLabel>\n        <StyledButton type=\"submit\" disabled={isFetching}>\n          {isFetching ? '......Loading' : 'Add contact'}\n        </StyledButton>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default AddContactForm;\n\nErrorForm.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nAddContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n\ninitialValues.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledSectionFilter = styled.section`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-left: 30px;\n  margin-bottom: 40px;\n`;\n\nexport const StyledFilterInput = styled.input`\n  padding: 3px 10px;\n  width: 250px;\n  height: 20px;\n  border: none;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n  border-radius: 5px;\n\n  &:focus {\n    outline: 1px solid greenyellow;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledSectionFilter, StyledFilterInput } from './Filter.styled';\n\nconst Filter = ({ onChange }) => {\n  //   console.log(onChange);\n  return (\n    <StyledSectionFilter>\n      <p>Find contacts by name</p>\n      <StyledFilterInput type=\"text\" name=\"filter\" onChange={onChange} />\n    </StyledSectionFilter>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledDeleteContactButton = styled.button`\n  margin: 0 30px 40px;\n  background-color: white;\n  border: 0px;\n  border-radius: 5px;\n  padding: 5px 15px;\n  height: 25px;\n  cursor: pointer;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n\n  &:hover {\n    background-color: red;\n  }\n\n  &:active {\n    background-color: rgb(207, 248, 197);\n  }\n`;\n\nexport const StyledContactsListUL = styled.ul`\n  margin-left: 30px;\n`;\n\nexport const StyledContactListItemLi = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  max-width: 500px;\n  height: 40px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyledDeleteContactButton,\n  StyledContactListItemLi,\n  StyledContactsListUL,\n} from './Contacts.styled';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter, getIsLoading } from 'redux/contacts/selectors';\n/* Modal */\nimport { useState } from 'react';\nimport Modal from 'react-modal';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nModal.setAppElement('#modal-root');\n/*  */\n\nconst getFilteredContacts = (contacts, filter) => {\n  return contacts.filter(({ name }) => {\n    // console.log(contacts);\n    return name.toLowerCase().includes(filter.toLowerCase());\n  });\n};\n\nexport const Contacts = ({ onDeleteContact }) => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = getFilteredContacts(contacts, filter);\n  const isFetching = useSelector(getIsLoading);\n\n  /* Modal */\n  const dispatch = useDispatch();\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [editName, setEditName] = useState('');\n  const [editNumber, setEditNumber] = useState('');\n\n  function openModal(name, number, id) {\n    setIsOpen(true);\n    setEditName(name);\n    setEditNumber(number);\n    setEditId(id);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function handleNameChange(event) {\n    setEditName(event.target.value);\n  }\n\n  function handleNumberChange(event) {\n    setEditNumber(event.target.value);\n  }\n\n  function handleEditContact(e) {\n    e.preventDefault();\n    dispatch(editContact({ id: editId, name: editName, number: editNumber }));\n    closeModal();\n  }\n  /*  */\n\n  return (\n    // console.log(contacts),\n    <StyledContactsListUL>\n      {filteredContacts.map(({ id, name, number }) => (\n        <StyledContactListItemLi key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <StyledDeleteContactButton\n            onClick={() => onDeleteContact(id)}\n            disabled={isFetching}\n          >\n            Delete\n          </StyledDeleteContactButton>\n          <button onClick={() => openModal(name, number, id)}>Edit</button>\n          <Modal\n            isOpen={modalIsOpen}\n            onRequestClose={closeModal}\n            contentLabel=\"Example Modal\"\n          >\n            <button onClick={closeModal}>close</button>\n            <div>Edit contact</div>\n            <form onSubmit={handleEditContact}>\n              <p>Contact ID {id}</p>\n              <input value={editName} onChange={handleNameChange} />\n              <input value={editNumber} onChange={handleNumberChange} />\n              <button type=\"submit\">Submit</button>\n            </form>\n          </Modal>\n        </StyledContactListItemLi>\n      ))}\n    </StyledContactsListUL>\n  );\n};\n\nContacts.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import { Title } from 'components/Title/Title';\nimport AddContactForm from 'components/AddContactForm/AddContactForm';\nimport Filter from 'components/Filter/Filter';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contacts/operations';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const checkContact = (arr, newName) => {\n    return arr.some(({ name }) => {\n      return newName.toLowerCase() === name.toLowerCase();\n    });\n  };\n\n  const handleAddContact = ({ name, number }) => {\n    const check = checkContact(contacts, name);\n    if (check) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name: name, number: number }));\n  };\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const handleFilterChange = event => {\n    dispatch(changeFilter(event.target.value));\n  };\n\n  return (\n    <>\n      <Title title={'Contacts'} />\n      <AddContactForm addContact={handleAddContact} />\n      <Title title={'Contacts'} />\n      <Filter value={filter} onChange={handleFilterChange} />\n      <Contacts onDeleteContact={handleDeleteContact} />\n    </>\n  );\n}\n"],"names":["StyledTitleH2","styled","Title","title","StyledLabel","StyledInput","Field","StyledErrorText","StyledButton","getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","initialValues","name","number","schema","yup","shape","required","min","matches","message","excludeEmptyString","max","ErrorForm","render","addContact","handleNameSubmit","values","resetForm","isFetching","useSelector","propTypes","PropTypes","isRequired","validationSchema","onSubmit","htmlFor","type","disabled","StyledSectionFilter","StyledFilterInput","onChange","StyledDeleteContactButton","StyledContactsListUL","StyledContactListItemLi","Modal","Contacts","onDeleteContact","filteredContacts","toLowerCase","includes","getFilteredContacts","dispatch","useDispatch","useState","modalIsOpen","setIsOpen","editId","setEditId","editName","setEditName","editNumber","setEditNumber","closeModal","handleNameChange","event","target","value","handleNumberChange","handleEditContact","e","preventDefault","editContact","id","map","onClick","openModal","isOpen","onRequestClose","contentLabel","ContactsPage","useEffect","fetchContacts","newName","check","some","alert","changeFilter","contactId","deleteContact"],"sourceRoot":""}